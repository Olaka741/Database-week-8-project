-- Library Management System Database
-- Created by: Shadrack Nandwa
-- Date: 2025-09-21

-- Question 1--
CREATE DATABASE IF NOT EXISTS LibraryManagementSystem;
USE LibraryManagementSystem;

-- Table for library members
CREATE TABLE Members (
    member_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    address TEXT,
    date_of_birth DATE,
    membership_date DATE NOT NULL,
    membership_status ENUM('Active', 'Inactive', 'Suspended') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table for authors
CREATE TABLE Authors (
    author_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    birth_date DATE,
    death_date DATE,
    nationality VARCHAR(50),
    biography TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for publishers
CREATE TABLE Publishers (
    publisher_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    address TEXT,
    phone VARCHAR(15),
    email VARCHAR(100),
    website VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for book categories
CREATE TABLE Categories (
    category_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    parent_category_id INT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (parent_category_id) REFERENCES Categories(category_id) ON DELETE SET NULL
);

-- Table for books
CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    isbn VARCHAR(20) UNIQUE NOT NULL,
    title VARCHAR(255) NOT NULL,
    publisher_id INT NOT NULL,
    publication_year YEAR,
    edition VARCHAR(20),
    language VARCHAR(30) DEFAULT 'English',
    page_count INT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (publisher_id) REFERENCES Publishers(publisher_id) ON DELETE CASCADE
);

-- Junction table for books and authors (Many-to-Many relationship)
CREATE TABLE BookAuthors (
    book_id INT NOT NULL,
    author_id INT NOT NULL,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,
    FOREIGN KEY (author_id) REFERENCES Authors(author_id) ON DELETE CASCADE
);

-- Junction table for books and categories (Many-to-Many relationship)
CREATE TABLE BookCategories (
    book_id INT NOT NULL,
    category_id INT NOT NULL,
    PRIMARY KEY (book_id, category_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES Categories(category_id) ON DELETE CASCADE
);

-- Table for book copies
CREATE TABLE BookCopies (
    copy_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    acquisition_date DATE NOT NULL,
    acquisition_price DECIMAL(10, 2),
    status ENUM('Available', 'Checked Out', 'Reserved', 'Lost', 'Damaged', 'Under Maintenance') DEFAULT 'Available',
    location VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE
);

-- Table for loans/transactions
CREATE TABLE Loans (
    loan_id INT AUTO_INCREMENT PRIMARY KEY,
    copy_id INT NOT NULL,
    member_id INT NOT NULL,
    checkout_date DATE NOT NULL,
    due_date DATE NOT NULL,
    return_date DATE NULL,
    late_fee DECIMAL(10, 2) DEFAULT 0.00,
    status ENUM('Active', 'Returned', 'Overdue') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (copy_id) REFERENCES BookCopies(copy_id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES Members(member_id) ON DELETE CASCADE
);

-- Table for reservations
CREATE TABLE Reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    member_id INT NOT NULL,
    reservation_date DATE NOT NULL,
    status ENUM('Active', 'Fulfilled', 'Cancelled') DEFAULT 'Active',
    notification_sent BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES Members(member_id) ON DELETE CASCADE
);

-- Table for fines
CREATE TABLE Fines (
    fine_id INT AUTO_INCREMENT PRIMARY KEY,
    member_id INT NOT NULL,
    loan_id INT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    reason VARCHAR(255) NOT NULL,
    issue_date DATE NOT NULL,
    paid_date DATE NULL,
    status ENUM('Outstanding', 'Paid', 'Waived') DEFAULT 'Outstanding',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (member_id) REFERENCES Members(member_id) ON DELETE CASCADE,
    FOREIGN KEY (loan_id) REFERENCES Loans(loan_id) ON DELETE SET NULL
);

-- Table for library staff
CREATE TABLE Staff (
    staff_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    phone VARCHAR(15),
    position VARCHAR(50) NOT NULL,
    hire_date DATE NOT NULL,
    salary DECIMAL(10, 2),
    status ENUM('Active', 'Inactive', 'On Leave') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Table for library events/activities
CREATE TABLE Events (
    event_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    description TEXT,
    event_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    location VARCHAR(100) NOT NULL,
    max_attendees INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Junction table for event registrations (Many-to-Many relationship)
CREATE TABLE EventRegistrations (
    registration_id INT AUTO_INCREMENT PRIMARY KEY,
    event_id INT NOT NULL,
    member_id INT NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    attended BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (event_id) REFERENCES Events(event_id) ON DELETE CASCADE,
    FOREIGN KEY (member_id) REFERENCES Members(member_id) ON DELETE CASCADE
);

-- Insert sample data

-- Insert sample members
INSERT INTO Members (first_name, last_name, email, phone, address, date_of_birth, membership_date) VALUES
('John', 'Doe', 'john.doe@email.com', '555-1234', '123 Main St, Nairobi', '1990-05-15', '2023-01-10'),
('Jane', 'Smith', 'jane.smith@email.com', '555-5678', '456 Oak Ave, Mombasa', '1985-08-22', '2023-02-15'),
('Michael', 'Johnson', 'michael.j@email.com', '555-9012', '789 Pine Rd, Kisumu', '1995-03-30', '2023-03-20');

-- Insert sample authors
INSERT INTO Authors (first_name, last_name, birth_date, death_date, nationality) VALUES
('Chinua', 'Achebe', '1930-11-16', '2013-03-21', 'Nigerian'),
('Ngũgĩ wa', 'Thiong''o', '1938-01-05', NULL, 'Kenyan'),
('J.K.', 'Rowling', '1965-07-31', NULL, 'British'),
('Stephen', 'King', '1947-09-21', NULL, 'American');

-- Insert sample publishers
INSERT INTO Publishers (name, address, phone, email, website) VALUES
('East African Educational Publishers', 'Nairobi, Kenya', '+254-20-234567', 'info@eaep.com', 'www.eaep.com'),
('Penguin Random House', 'New York, USA', '+1-212-7829000', 'info@penguinrandomhouse.com', 'www.penguinrandomhouse.com'),
('Bloomsbury Publishing', 'London, UK', '+44-20-7494-2111', 'info@bloomsbury.com', 'www.bloomsbury.com');

-- Insert sample categories
INSERT INTO Categories (name, description, parent_category_id) VALUES
('Fiction', 'Imaginative literature', NULL),
('Non-Fiction', 'Factual literature', NULL),
('Science Fiction', 'Speculative fiction', 1),
('Fantasy', 'Magic and supernatural elements', 1),
('Biography', 'Accounts of people''s lives', 2),
('History', 'Study of past events', 2),
('African Literature', 'Literature from Africa', 1);

-- Insert sample books
INSERT INTO Books (isbn, title, publisher_id, publication_year, edition, language, page_count, description) VALUES
('9780439139595', 'Harry Potter and the Philosopher''s Stone', 3, 1997, '1st', 'English', 320, 'The first book in the Harry Potter series'),
('9780439064866', 'Things Fall Apart', 1, 1958, '1st', 'English', 209, 'A classic novel about Nigerian society'),
('9780143105454', 'Pet Sematary', 2, 1983, '1st', 'English', 374, 'A horror novel by Stephen King'),
('9780439139601', 'Wizard of the Crow', 1, 2006, '1st', 'English', 768, 'A novel by Ngũgĩ wa Thiong''o');

-- Link books to authors
INSERT INTO BookAuthors (book_id, author_id) VALUES
(1, 3),  -- Harry Potter by J.K. Rowling
(2, 1),  -- Things Fall Apart by Chinua Achebe
(3, 4),  -- Pet Sematary by Stephen King
(4, 2);  -- Wizard of the Crow by Ngũgĩ wa Thiong'o

-- Link books to categories
INSERT INTO BookCategories (book_id, category_id) VALUES
(1, 4),  -- Harry Potter in Fantasy
(1, 1),  -- Harry Potter in Fiction
(2, 7),  -- Things Fall Apart in African Literature
(2, 1),  -- Things Fall Apart in Fiction
(3, 1),  -- Pet Sematary in Fiction
(4, 7),  -- Wizard of the Crow in African Literature
(4, 1);  -- Wizard of the Crow in Fiction

-- Insert sample book copies
INSERT INTO BookCopies (book_id, acquisition_date, acquisition_price, status, location) VALUES
(1, '2023-01-15', 25.99, 'Available', 'Fiction Section, Shelf A1'),
(1, '2023-02-10', 25.99, 'Checked Out', 'Fiction Section, Shelf A1'),
(2, '2022-11-05', 19.99, 'Available', 'African Literature Section, Shelf B2'),
(3, '2023-03-20', 22.50, 'Available', 'Fiction Section, Shelf A3'),
(4, '2023-01-30', 29.99, 'Under Maintenance', 'African Literature Section, Shelf B1');

-- Insert sample loans
INSERT INTO Loans (copy_id, member_id, checkout_date, due_date, return_date, status) VALUES
(2, 1, '2023-10-01', '2023-10-15', NULL, 'Active'),
(3, 2, '2023-09-20', '2023-10-04', '2023-10-03', 'Returned');

-- Insert sample staff
INSERT INTO Staff (first_name, last_name, email, phone, position, hire_date, salary) VALUES
('Alice', 'Mwangi', 'alice.mwangi@library.com', '555-1122', 'Librarian', '2020-06-15', 75000.00),
('David', 'Ochieng', 'david.ochieng@library.com', '555-3344', 'Assistant Librarian', '2021-02-10', 55000.00);

-- Insert sample events
INSERT INTO Events (title, description, event_date, start_time, end_time, location, max_attendees) VALUES
('Book Club Meeting', 'Monthly book discussion group', '2023-10-25', '18:00:00', '20:00:00', 'Library Conference Room', 20),
('Children''s Story Time', 'Weekly reading session for children', '2023-10-21', '10:00:00', '11:00:00', 'Children''s Section', 15);

-- Create indexes for better performance
CREATE INDEX idx_books_title ON Books(title);
CREATE INDEX idx_members_email ON Members(email);
CREATE INDEX idx_loans_member ON Loans(member_id);
CREATE INDEX idx_loans_due_date ON Loans(due_date);
CREATE INDEX idx_authors_last_name ON Authors(last_name);

-- Create a view for currently checked out books
CREATE VIEW CurrentlyCheckedOut AS
SELECT 
    m.first_name, 
    m.last_name, 
    b.title, 
    l.checkout_date, 
    l.due_date,
    DATEDIFF(CURDATE(), l.due_date) AS days_overdue
FROM Loans l
JOIN Members m ON l.member_id = m.member_id
JOIN BookCopies bc ON l.copy_id = bc.copy_id
JOIN Books b ON bc.book_id = b.book_id
WHERE l.return_date IS NULL;

-- Create a view for available books
CREATE VIEW AvailableBooks AS
SELECT 
    b.title,
    GROUP_CONCAT(DISTINCT CONCAT(a.first_name, ' ', a.last_name) SEPARATOR ', ') AS authors,
    GROUP_CONCAT(DISTINCT c.name SEPARATOR ', ') AS categories,
    bc.location
FROM BookCopies bc
JOIN Books b ON bc.book_id = b.book_id
JOIN BookAuthors ba ON b.book_id = ba.book_id
JOIN Authors a ON ba.author_id = a.author_id
JOIN BookCategories bcats ON b.book_id = bcats.book_id
JOIN Categories c ON bcats.category_id = c.category_id
WHERE bc.status = 'Available'
GROUP BY b.book_id, bc.copy_id;

-- Create a stored procedure to check out a book
DELIMITER //
CREATE PROCEDURE CheckoutBook(
    IN p_copy_id INT,
    IN p_member_id INT,
    IN p_days INT
)
BEGIN
    DECLARE due_date DATE;
    SET due_date = DATE_ADD(CURDATE(), INTERVAL p_days DAY);
    
    INSERT INTO Loans (copy_id, member_id, checkout_date, due_date)
    VALUES (p_copy_id, p_member_id, CURDATE(), due_date);
    
    UPDATE BookCopies SET status = 'Checked Out' WHERE copy_id = p_copy_id;
    
    SELECT CONCAT('Book checked out successfully. Due date: ', due_date) AS message;
END //
DELIMITER ;

-- Create a stored procedure to return a book
DELIMITER //
CREATE PROCEDURE ReturnBook(
    IN p_loan_id INT
)
BEGIN
    DECLARE v_due_date DATE;
    DECLARE v_late_fee DECIMAL(10,2);
    
    SELECT due_date INTO v_due_date FROM Loans WHERE loan_id = p_loan_id;
    
    SET v_late_fee = 0;
    IF CURDATE() > v_due_date THEN
        SET v_late_fee = DATEDIFF(CURDATE(), v_due_date) * 0.50; -- 50 cents per day late
    END IF;
    
    UPDATE Loans 
    SET return_date = CURDATE(), 
        late_fee = v_late_fee,
        status = 'Returned'
    WHERE loan_id = p_loan_id;
    
    UPDATE BookCopies 
    SET status = 'Available' 
    WHERE copy_id = (SELECT copy_id FROM Loans WHERE loan_id = p_loan_id);
    
    IF v_late_fee > 0 THEN
        INSERT INTO Fines (member_id, loan_id, amount, reason, issue_date)
        SELECT member_id, p_loan_id, v_late_fee, 'Late return', CURDATE()
        FROM Loans WHERE loan_id = p_loan_id;
        
        SELECT CONCAT('Book returned with late fee: $', v_late_fee) AS message;
    ELSE
        SELECT 'Book returned successfully' AS message;
    END IF;
END //
DELIMITER ;

-- Create a trigger to update book copy status when loan is created
DELIMITER //
CREATE TRIGGER after_loan_insert
AFTER INSERT ON Loans
FOR EACH ROW
BEGIN
    UPDATE BookCopies 
    SET status = 'Checked Out', 
        updated_at = CURRENT_TIMESTAMP
    WHERE copy_id = NEW.copy_id;
END //
DELIMITER ;

-- Create a trigger to update book copy status when loan is updated
DELIMITER //
CREATE TRIGGER after_loan_update
AFTER UPDATE ON Loans
FOR EACH ROW
BEGIN
    IF NEW.return_date IS NOT NULL AND OLD.return_date IS NULL THEN
        UPDATE BookCopies 
        SET status = 'Available', 
            updated_at = CURRENT_TIMESTAMP
        WHERE copy_id = NEW.copy_id;
    END IF;
END //
DELIMITER ;

-- Display success message
SELECT 'Library Management System database created successfully!' AS Status;

